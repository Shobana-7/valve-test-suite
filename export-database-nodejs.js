// Node.js-based database export for AWS RDS migration (Windows compatible)
const mysql = require('mysql2/promise');
const fs = require('fs').promises;
require('dotenv').config();

async function exportDatabaseNodeJS() {
  console.log('üîÑ Starting database export using Node.js...');
  
  try {
    // Database connection details
    const dbConfig = {
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'valve_test_suite'
    };

    console.log(`üìä Connecting to database: ${dbConfig.database}`);
    
    const connection = await mysql.createConnection(dbConfig);
    
    // Get database statistics
    console.log('\nüìà Database Statistics:');
    
    const [tables] = await connection.query(`
      SELECT
        TABLE_NAME as table_name,
        TABLE_ROWS as table_rows,
        ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024), 2) AS size_mb
      FROM information_schema.tables
      WHERE TABLE_SCHEMA = ?
      ORDER BY TABLE_NAME
    `, [dbConfig.database]);
    
    console.log('Tables and row counts:');
    let totalRows = 0;
    let totalSize = 0;
    
    tables.forEach(table => {
      console.log(`  ${table.table_name}: ${table.table_rows || 0} rows (${table.size_mb} MB)`);
      totalRows += parseInt(table.table_rows) || 0;
      totalSize += parseFloat(table.size_mb) || 0;
    });
    
    console.log(`\nüíæ Total: ${tables.length} tables, ${totalRows} rows, ${totalSize.toFixed(2)} MB`);
    
    // Generate SQL export
    console.log('\nüîÑ Generating SQL export...');
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    let sqlContent = '';
    
    // Add header
    sqlContent += `-- MySQL Database Export\n`;
    sqlContent += `-- Database: ${dbConfig.database}\n`;
    sqlContent += `-- Export Date: ${new Date().toISOString()}\n`;
    sqlContent += `-- Generated by Node.js export script\n\n`;
    
    sqlContent += `SET FOREIGN_KEY_CHECKS = 0;\n`;
    sqlContent += `SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";\n`;
    sqlContent += `SET AUTOCOMMIT = 0;\n`;
    sqlContent += `START TRANSACTION;\n\n`;
    
    sqlContent += `-- Create database\n`;
    sqlContent += `CREATE DATABASE IF NOT EXISTS \`${dbConfig.database}\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n`;
    sqlContent += `USE \`${dbConfig.database}\`;\n\n`;
    
    // Export each table
    for (const table of tables) {
      const tableName = table.table_name;
      console.log(`  üìÑ Exporting table: ${tableName}`);
      
      // Get table structure
      const [createTable] = await connection.query(`SHOW CREATE TABLE \`${tableName}\``);
      sqlContent += `-- Table structure for \`${tableName}\`\n`;
      sqlContent += `DROP TABLE IF EXISTS \`${tableName}\`;\n`;
      sqlContent += createTable[0]['Create Table'] + ';\n\n';
      
      // Get table data
      const [rows] = await connection.query(`SELECT * FROM \`${tableName}\``);
      
      if (rows.length > 0) {
        sqlContent += `-- Data for table \`${tableName}\`\n`;
        
        // Get column names
        const columns = Object.keys(rows[0]);
        const columnNames = columns.map(col => `\`${col}\``).join(', ');
        
        sqlContent += `INSERT INTO \`${tableName}\` (${columnNames}) VALUES\n`;
        
        const values = rows.map(row => {
          const rowValues = columns.map(col => {
            const value = row[col];
            if (value === null) return 'NULL';
            if (typeof value === 'string') {
              return `'${value.replace(/'/g, "''").replace(/\\/g, '\\\\')}'`;
            }
            if (value instanceof Date) {
              return `'${value.toISOString().slice(0, 19).replace('T', ' ')}'`;
            }
            if (typeof value === 'boolean') {
              return value ? '1' : '0';
            }
            return value;
          });
          return `(${rowValues.join(', ')})`;
        });
        
        sqlContent += values.join(',\n') + ';\n\n';
      }
    }
    
    sqlContent += `SET FOREIGN_KEY_CHECKS = 1;\n`;
    sqlContent += `COMMIT;\n`;
    
    // Save files
    const backupFile = `valve_test_suite_backup_${timestamp}.sql`;
    await fs.writeFile(backupFile, sqlContent);
    console.log(`‚úÖ Full backup saved: ${backupFile}`);
    
    // Create schema-only version
    let schemaContent = sqlContent.replace(/-- Data for table.*?;\n\n/gs, '');
    const schemaFile = `valve_test_suite_schema_${timestamp}.sql`;
    await fs.writeFile(schemaFile, schemaContent);
    console.log(`‚úÖ Schema backup saved: ${schemaFile}`);
    
    // Create AWS environment template
    const envTemplate = `# AWS RDS Configuration Template
# Replace the endpoint with your actual RDS endpoint after creating RDS instance
DB_HOST=valve-test-db.xxxxxxxxx.us-east-1.rds.amazonaws.com
DB_PORT=3306
DB_USER=admin
DB_PASSWORD=YourSecurePassword123!
DB_NAME=valve_test_suite

# SSL Configuration (recommended for production)
DB_SSL=true
DB_SSL_CA=rds-ca-2019-root.pem

# JWT Configuration (keep your existing values)
JWT_SECRET=${process.env.JWT_SECRET || 'your_jwt_secret_here'}
JWT_EXPIRES_IN=${process.env.JWT_EXPIRES_IN || '24h'}

# Server Configuration
PORT=${process.env.PORT || 5000}
NODE_ENV=production

# Original local configuration (backup)
# DB_HOST=localhost
# DB_USER=root
# DB_PASSWORD=${process.env.DB_PASSWORD || ''}
# DB_NAME=valve_test_suite
`;
    
    await fs.writeFile('.env.aws-template', envTemplate);
    console.log('‚úÖ AWS environment template saved: .env.aws-template');
    
    // Create import script for Windows
    const importScript = `@echo off
REM AWS RDS Import Script for Windows
REM Usage: import-to-aws.bat <RDS_ENDPOINT> <USERNAME> <PASSWORD>

if "%~3"=="" (
    echo Usage: %0 ^<RDS_ENDPOINT^> ^<USERNAME^> ^<PASSWORD^>
    echo Example: %0 valve-test-db.xxxxxxxxx.us-east-1.rds.amazonaws.com admin MyPassword123
    exit /b 1
)

set RDS_ENDPOINT=%1
set USERNAME=%2
set PASSWORD=%3
set DATABASE_NAME=valve_test_suite
set BACKUP_FILE=${backupFile}

echo üîÑ Importing database to AWS RDS...
echo Endpoint: %RDS_ENDPOINT%
echo Database: %DATABASE_NAME%
echo Backup file: %BACKUP_FILE%

REM Test connection using Node.js
echo üîç Testing connection...
node -e "const mysql=require('mysql2/promise');(async()=>{try{const c=await mysql.createConnection({host:'%RDS_ENDPOINT%',user:'%USERNAME%',password:'%PASSWORD%'});console.log('‚úÖ Connection successful');await c.end();}catch(e){console.error('‚ùå Connection failed:',e.message);process.exit(1);}})();"

if errorlevel 1 (
    echo ‚ùå Connection test failed!
    exit /b 1
)

REM Import using Node.js
echo üì• Importing data...
node -e "const mysql=require('mysql2/promise');const fs=require('fs');(async()=>{try{const c=await mysql.createConnection({host:'%RDS_ENDPOINT%',user:'%USERNAME%',password:'%PASSWORD%',multipleStatements:true});const sql=fs.readFileSync('%BACKUP_FILE%','utf8');await c.query(sql);console.log('‚úÖ Import completed successfully!');await c.end();}catch(e){console.error('‚ùå Import failed:',e.message);process.exit(1);}})();"

if errorlevel 1 (
    echo ‚ùå Import failed!
    exit /b 1
)

echo ‚úÖ Database import completed successfully!
`;
    
    await fs.writeFile('import-to-aws.bat', importScript);
    console.log('‚úÖ Windows import script saved: import-to-aws.bat');
    
    // Create PowerShell version too
    const psScript = `# AWS RDS Import Script for PowerShell
param(
    [Parameter(Mandatory=$true)]
    [string]$RdsEndpoint,
    
    [Parameter(Mandatory=$true)]
    [string]$Username,
    
    [Parameter(Mandatory=$true)]
    [string]$Password
)

$DatabaseName = "valve_test_suite"
$BackupFile = "${backupFile}"

Write-Host "üîÑ Importing database to AWS RDS..." -ForegroundColor Blue
Write-Host "Endpoint: $RdsEndpoint" -ForegroundColor Green
Write-Host "Database: $DatabaseName" -ForegroundColor Green
Write-Host "Backup file: $BackupFile" -ForegroundColor Green

# Test connection
Write-Host "üîç Testing connection..." -ForegroundColor Blue
$testScript = @"
const mysql=require('mysql2/promise');
(async()=>{
  try{
    const c=await mysql.createConnection({
      host:'$RdsEndpoint',
      user:'$Username',
      password:'$Password'
    });
    console.log('‚úÖ Connection successful');
    await c.end();
  }catch(e){
    console.error('‚ùå Connection failed:',e.message);
    process.exit(1);
  }
})();
"@

node -e $testScript
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Connection test failed!" -ForegroundColor Red
    exit 1
}

# Import data
Write-Host "üì• Importing data..." -ForegroundColor Blue
$importScript = @"
const mysql=require('mysql2/promise');
const fs=require('fs');
(async()=>{
  try{
    const c=await mysql.createConnection({
      host:'$RdsEndpoint',
      user:'$Username',
      password:'$Password',
      multipleStatements:true
    });
    const sql=fs.readFileSync('$BackupFile','utf8');
    await c.query(sql);
    console.log('‚úÖ Import completed successfully!');
    await c.end();
  }catch(e){
    console.error('‚ùå Import failed:',e.message);
    process.exit(1);
  }
})();
"@

node -e $importScript
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Import failed!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Database import completed successfully!" -ForegroundColor Green
`;
    
    await fs.writeFile('import-to-aws.ps1', psScript);
    console.log('‚úÖ PowerShell import script saved: import-to-aws.ps1');
    
    await connection.end();
    
    console.log('\nüéâ Database export completed successfully!');
    console.log('\nüìã Files created:');
    console.log(`  üìÑ ${backupFile} - Full database backup`);
    console.log(`  üìÑ ${schemaFile} - Schema only backup`);
    console.log(`  üìÑ .env.aws-template - Environment configuration template`);
    console.log(`  üìÑ import-to-aws.bat - Windows batch import script`);
    console.log(`  üìÑ import-to-aws.ps1 - PowerShell import script`);
    
    console.log('\nüöÄ Next Steps:');
    console.log('1. Create AWS RDS MySQL instance using AWS Console or CLI');
    console.log('2. Update .env.aws-template with your RDS endpoint');
    console.log('3. Run import script:');
    console.log('   - Windows: import-to-aws.bat <endpoint> <username> <password>');
    console.log('   - PowerShell: .\\import-to-aws.ps1 -RdsEndpoint <endpoint> -Username <username> -Password <password>');
    console.log('4. Copy .env.aws-template to .env');
    console.log('5. Test connection: node test-aws-rds-connection.js');
    
  } catch (error) {
    console.error('‚ùå Export failed:', error.message);
    process.exit(1);
  }
}

// Run the export
exportDatabaseNodeJS();
